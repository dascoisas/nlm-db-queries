/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import * as fs from 'fs';
import { Row } from '@fast-csv/format/build/src/typessv/format/build/src/typessv/format/build/@fast-csv/format/build/src/FormatterOptions { Form@fast-csv/format/build/src/Forma@fast-csv/format/build/src/CsvFormatterStreamast-csv/format/bui@fast-csv/format/build/src/typesForma@fast-csv/format/build/src/CsvForm@fast-csv/format/build/src/CsvFormatterStreammatterStr@fast-csv/format/build/src/typesrom '@fast-csv/for@fast-csv/format/build/src/FormatterOptionsorm@fast-csv/format/build/src/CsvFormatterStream * from '@fast-csv/format/build/src/types';
export { CsvFor@fast-csv/format/build/src/FormatterOptionsm '@fast-csv/format/build/src/CsvFormatterStream';
export { FormatterOptions, FormatterOptionsArgs } from '@fast-csv/format/build/src/FormatterOptions';
export declare const format: <I extends Row, O extends Row>(options?: FormatterOptionsArgs<I, O> | undefined) => CsvFormatterStream<I, O>;
export declare const write: <I extends Row, O extends Row>(rows: I[], options?: FormatterOptionsArgs<I, O> | undefined) => CsvFormatterStream<I, O>;
export declare const writeToStream: <T extends NodeJS.WritableStream, I extends Row, O extends Row>(ws: T, rows: I[], options?: FormatterOptionsArgs<I, O> | undefined) => T;
export declare const writeToBuffer: <I extends Row, O extends Row>(rows: I[], opts?: FormatterOptionsArgs<I, O>) => Promise<Buffer>;
export declare const writeToString: <I extends Row, O extends Row>(rows: I[], options?: FormatterOptionsArgs<I, O> | undefined) => Promise<string>;
export declare const writeToPath: <I extends Row, O extends Row>(path: string, rows: I[], options?: FormatterOptionsArgs<I, O> | undefined) => fs.WriteStream;
