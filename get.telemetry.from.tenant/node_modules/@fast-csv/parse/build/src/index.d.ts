/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { ParserOptionsArgs } from '@fast-csv/parse/build/src/ParserOptions/build/src/ParserOptions/build/src/P@fast-csv/parse/build/src/CsvParserStreamport { @fast-csv/parse/b@fast-csv/parse/build/src/typesc/CsvParserStream @fast-csv/parse/build/src/typesfast-csv/parse/b@fast-csv/parse/buil@fast-csv/parse/build/src/CsvParserStreamarserStream'@fast-csv/parse/build/src/typest { Row } @fast-csv/parse/build/src/ParserOptions/parse/buil@fast-csv/parse/build/src/CsvParserStreamort * from '@fast-csv/parse/build/src/types';
export @fast-csv/parse/build/src/ParserOptionsam } from '@fast-csv/parse/build/src/CsvParserStream';
export { ParserOptions, ParserOptionsArgs } from '@fast-csv/parse/build/src/ParserOptions';
export declare const parse: <I extends Row, O extends Row>(args?: ParserOptionsArgs) => CsvParserStream<I, O>;
export declare const parseStream: <I extends Row, O extends Row>(stream: NodeJS.ReadableStream, options?: ParserOptionsArgs) => CsvParserStream<I, O>;
export declare const parseFile: <I extends Row, O extends Row>(location: string, options?: ParserOptionsArgs) => CsvParserStream<I, O>;
export declare const parseString: <I extends Row, O extends Row>(string: string, options?: ParserOptionsArgs) => CsvParserStream<I, O>;
